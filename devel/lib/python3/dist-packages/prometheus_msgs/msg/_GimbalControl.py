# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from prometheus_msgs/GimbalControl.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class GimbalControl(genpy.Message):
  _md5sum = "4412721d5cb10a90210842710eca3f97"
  _type = "prometheus_msgs/GimbalControl"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
uint8 Id
#control mode 0:nothong 1:angle 2:speed 3:home postion 
uint8 rpyMode
uint8 manual = 1
uint8 home = 2
uint8 hold = 3 # 不控制
uint8 fellow = 4 #fellow吊舱跟随无人机移动

uint8 roll
uint8 yaw 
uint8 pitch

uint8 noCtl = 0
uint8 velocityCtl = 1
uint8 angleCtl = 2

float32 rValue # deg 单位
float32 yValue # deg
float32 pValue # deg 


# focus
uint8 focusMode # 默认值
uint8 focusStop = 1
uint8 focusOut = 2
uint8 focusIn = 3

# zoom
uint8 zoomMode # 默认值
uint8 zoomStop = 1
uint8 zoomOut = 2
uint8 zoomIn = 3
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  # Pseudo-constants
  manual = 1
  home = 2
  hold = 3
  fellow = 4
  noCtl = 0
  velocityCtl = 1
  angleCtl = 2
  focusStop = 1
  focusOut = 2
  focusIn = 3
  zoomStop = 1
  zoomOut = 2
  zoomIn = 3

  __slots__ = ['header','Id','rpyMode','roll','yaw','pitch','rValue','yValue','pValue','focusMode','zoomMode']
  _slot_types = ['std_msgs/Header','uint8','uint8','uint8','uint8','uint8','float32','float32','float32','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,Id,rpyMode,roll,yaw,pitch,rValue,yValue,pValue,focusMode,zoomMode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GimbalControl, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.Id is None:
        self.Id = 0
      if self.rpyMode is None:
        self.rpyMode = 0
      if self.roll is None:
        self.roll = 0
      if self.yaw is None:
        self.yaw = 0
      if self.pitch is None:
        self.pitch = 0
      if self.rValue is None:
        self.rValue = 0.
      if self.yValue is None:
        self.yValue = 0.
      if self.pValue is None:
        self.pValue = 0.
      if self.focusMode is None:
        self.focusMode = 0
      if self.zoomMode is None:
        self.zoomMode = 0
    else:
      self.header = std_msgs.msg.Header()
      self.Id = 0
      self.rpyMode = 0
      self.roll = 0
      self.yaw = 0
      self.pitch = 0
      self.rValue = 0.
      self.yValue = 0.
      self.pValue = 0.
      self.focusMode = 0
      self.zoomMode = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_5B3f2B().pack(_x.Id, _x.rpyMode, _x.roll, _x.yaw, _x.pitch, _x.rValue, _x.yValue, _x.pValue, _x.focusMode, _x.zoomMode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 19
      (_x.Id, _x.rpyMode, _x.roll, _x.yaw, _x.pitch, _x.rValue, _x.yValue, _x.pValue, _x.focusMode, _x.zoomMode,) = _get_struct_5B3f2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_5B3f2B().pack(_x.Id, _x.rpyMode, _x.roll, _x.yaw, _x.pitch, _x.rValue, _x.yValue, _x.pValue, _x.focusMode, _x.zoomMode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 19
      (_x.Id, _x.rpyMode, _x.roll, _x.yaw, _x.pitch, _x.rValue, _x.yValue, _x.pValue, _x.focusMode, _x.zoomMode,) = _get_struct_5B3f2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_5B3f2B = None
def _get_struct_5B3f2B():
    global _struct_5B3f2B
    if _struct_5B3f2B is None:
        _struct_5B3f2B = struct.Struct("<5B3f2B")
    return _struct_5B3f2B
