// Generated by gencpp from file prometheus_msgs/GimbalState.msg
// DO NOT EDIT!


#ifndef PROMETHEUS_MSGS_MESSAGE_GIMBALSTATE_H
#define PROMETHEUS_MSGS_MESSAGE_GIMBALSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace prometheus_msgs
{
template <class ContainerAllocator>
struct GimbalState_
{
  typedef GimbalState_<ContainerAllocator> Type;

  GimbalState_()
    : header()
    , Id(0)
    , feedbackMode(0)
    , mode(0)
    , isRecording(false)
    , zoomState(0)
    , zoomVal(0.0)
    , imuAngle()
    , rotorAngle()
    , imuAngleVel()
    , rotorAngleTarget()  {
      imuAngle.assign(0.0);

      rotorAngle.assign(0.0);

      imuAngleVel.assign(0.0);

      rotorAngleTarget.assign(0.0);
  }
  GimbalState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , Id(0)
    , feedbackMode(0)
    , mode(0)
    , isRecording(false)
    , zoomState(0)
    , zoomVal(0.0)
    , imuAngle()
    , rotorAngle()
    , imuAngleVel()
    , rotorAngleTarget()  {
  (void)_alloc;
      imuAngle.assign(0.0);

      rotorAngle.assign(0.0);

      imuAngleVel.assign(0.0);

      rotorAngleTarget.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _Id_type;
  _Id_type Id;

   typedef uint8_t _feedbackMode_type;
  _feedbackMode_type feedbackMode;

   typedef uint8_t _mode_type;
  _mode_type mode;

   typedef uint8_t _isRecording_type;
  _isRecording_type isRecording;

   typedef uint8_t _zoomState_type;
  _zoomState_type zoomState;

   typedef float _zoomVal_type;
  _zoomVal_type zoomVal;

   typedef boost::array<float, 3>  _imuAngle_type;
  _imuAngle_type imuAngle;

   typedef boost::array<float, 3>  _rotorAngle_type;
  _rotorAngle_type rotorAngle;

   typedef boost::array<float, 3>  _imuAngleVel_type;
  _imuAngleVel_type imuAngleVel;

   typedef boost::array<float, 3>  _rotorAngleTarget_type;
  _rotorAngleTarget_type rotorAngleTarget;





  typedef boost::shared_ptr< ::prometheus_msgs::GimbalState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::prometheus_msgs::GimbalState_<ContainerAllocator> const> ConstPtr;

}; // struct GimbalState_

typedef ::prometheus_msgs::GimbalState_<std::allocator<void> > GimbalState;

typedef boost::shared_ptr< ::prometheus_msgs::GimbalState > GimbalStatePtr;
typedef boost::shared_ptr< ::prometheus_msgs::GimbalState const> GimbalStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::prometheus_msgs::GimbalState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::prometheus_msgs::GimbalState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::prometheus_msgs::GimbalState_<ContainerAllocator1> & lhs, const ::prometheus_msgs::GimbalState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.Id == rhs.Id &&
    lhs.feedbackMode == rhs.feedbackMode &&
    lhs.mode == rhs.mode &&
    lhs.isRecording == rhs.isRecording &&
    lhs.zoomState == rhs.zoomState &&
    lhs.zoomVal == rhs.zoomVal &&
    lhs.imuAngle == rhs.imuAngle &&
    lhs.rotorAngle == rhs.rotorAngle &&
    lhs.imuAngleVel == rhs.imuAngleVel &&
    lhs.rotorAngleTarget == rhs.rotorAngleTarget;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::prometheus_msgs::GimbalState_<ContainerAllocator1> & lhs, const ::prometheus_msgs::GimbalState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace prometheus_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::prometheus_msgs::GimbalState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::prometheus_msgs::GimbalState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::prometheus_msgs::GimbalState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::prometheus_msgs::GimbalState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::prometheus_msgs::GimbalState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::prometheus_msgs::GimbalState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::prometheus_msgs::GimbalState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "db2afbf1ba0d28d13289f903531456f5";
  }

  static const char* value(const ::prometheus_msgs::GimbalState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdb2afbf1ba0d28d1ULL;
  static const uint64_t static_value2 = 0x3289f903531456f5ULL;
};

template<class ContainerAllocator>
struct DataType< ::prometheus_msgs::GimbalState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "prometheus_msgs/GimbalState";
  }

  static const char* value(const ::prometheus_msgs::GimbalState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::prometheus_msgs::GimbalState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"uint8 Id\n"
"\n"
"# 0: 发一句,回一句: 此状态下，相机倍数zoomVal有效，imuAngleVel为估算直\n"
"# 1: 发一句,一直回复: 此状态下，相机倍数zoomVal失效，imuAngleVel为真直\n"
"uint8 feedbackMode\n"
"\n"
"#mode \n"
"# 0: 手动控制\n"
"# 1: home \n"
"# 2: tracking \n"
"# 3: yaw follow 吊舱跟随无人机移动\n"
"# 4: hold 吊舱不跟随无人机\n"
"# 5: search 自动移动旋转\n"
"uint8 mode\n"
"\n"
"# 是否视频录制\n"
"bool isRecording\n"
"\n"
"# 是否开启自动缩放(VisionDiff需要指定面积才能生效)\n"
"# 0: 保持\n"
"# 1: 放大\n"
"# 2: 缩小\n"
"# 3: 自动\n"
"uint8 zoomState\n"
"\n"
"# 当前所处倍数\n"
"float32 zoomVal\n"
"\n"
"#roll,pitch,yaw\n"
"float32[3] imuAngle\n"
"\n"
"#Current gimbal joint angles(roll,pitch,yaw), published at 30 Hz.\n"
"float32[3] rotorAngle\n"
"\n"
"# rpy_vel 角速度\n"
"float32[3] imuAngleVel\n"
"\n"
"# rpy_tgt 目标角度\n"
"float32[3] rotorAngleTarget\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::prometheus_msgs::GimbalState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::prometheus_msgs::GimbalState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.Id);
      stream.next(m.feedbackMode);
      stream.next(m.mode);
      stream.next(m.isRecording);
      stream.next(m.zoomState);
      stream.next(m.zoomVal);
      stream.next(m.imuAngle);
      stream.next(m.rotorAngle);
      stream.next(m.imuAngleVel);
      stream.next(m.rotorAngleTarget);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GimbalState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::prometheus_msgs::GimbalState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::prometheus_msgs::GimbalState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "Id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Id);
    s << indent << "feedbackMode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.feedbackMode);
    s << indent << "mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode);
    s << indent << "isRecording: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isRecording);
    s << indent << "zoomState: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.zoomState);
    s << indent << "zoomVal: ";
    Printer<float>::stream(s, indent + "  ", v.zoomVal);
    s << indent << "imuAngle[]" << std::endl;
    for (size_t i = 0; i < v.imuAngle.size(); ++i)
    {
      s << indent << "  imuAngle[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.imuAngle[i]);
    }
    s << indent << "rotorAngle[]" << std::endl;
    for (size_t i = 0; i < v.rotorAngle.size(); ++i)
    {
      s << indent << "  rotorAngle[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.rotorAngle[i]);
    }
    s << indent << "imuAngleVel[]" << std::endl;
    for (size_t i = 0; i < v.imuAngleVel.size(); ++i)
    {
      s << indent << "  imuAngleVel[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.imuAngleVel[i]);
    }
    s << indent << "rotorAngleTarget[]" << std::endl;
    for (size_t i = 0; i < v.rotorAngleTarget.size(); ++i)
    {
      s << indent << "  rotorAngleTarget[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.rotorAngleTarget[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PROMETHEUS_MSGS_MESSAGE_GIMBALSTATE_H
