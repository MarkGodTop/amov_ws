// Generated by gencpp from file prometheus_msgs/Control.msg
// DO NOT EDIT!


#ifndef PROMETHEUS_MSGS_MESSAGE_CONTROL_H
#define PROMETHEUS_MSGS_MESSAGE_CONTROL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace prometheus_msgs
{
template <class ContainerAllocator>
struct Control_
{
  typedef Control_<ContainerAllocator> Type;

  Control_()
    : mouse(0)
    , x(0.0)
    , y(0.0)  {
    }
  Control_(const ContainerAllocator& _alloc)
    : mouse(0)
    , x(0.0)
    , y(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _mouse_type;
  _mouse_type mouse;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(MOUSE_LEFT)
  #undef MOUSE_LEFT
#endif
#if defined(_WIN32) && defined(MOUSE_RIGHT)
  #undef MOUSE_RIGHT
#endif

  enum {
    MOUSE_LEFT = 0u,
    MOUSE_RIGHT = 1u,
  };


  typedef boost::shared_ptr< ::prometheus_msgs::Control_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::prometheus_msgs::Control_<ContainerAllocator> const> ConstPtr;

}; // struct Control_

typedef ::prometheus_msgs::Control_<std::allocator<void> > Control;

typedef boost::shared_ptr< ::prometheus_msgs::Control > ControlPtr;
typedef boost::shared_ptr< ::prometheus_msgs::Control const> ControlConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::prometheus_msgs::Control_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::prometheus_msgs::Control_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::prometheus_msgs::Control_<ContainerAllocator1> & lhs, const ::prometheus_msgs::Control_<ContainerAllocator2> & rhs)
{
  return lhs.mouse == rhs.mouse &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::prometheus_msgs::Control_<ContainerAllocator1> & lhs, const ::prometheus_msgs::Control_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace prometheus_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::prometheus_msgs::Control_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::prometheus_msgs::Control_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::prometheus_msgs::Control_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::prometheus_msgs::Control_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::prometheus_msgs::Control_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::prometheus_msgs::Control_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::prometheus_msgs::Control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d058b6a14f3e9c86c89eb0f109f6047d";
  }

  static const char* value(const ::prometheus_msgs::Control_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd058b6a14f3e9c86ULL;
  static const uint64_t static_value2 = 0xc89eb0f109f6047dULL;
};

template<class ContainerAllocator>
struct DataType< ::prometheus_msgs::Control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "prometheus_msgs/Control";
  }

  static const char* value(const ::prometheus_msgs::Control_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::prometheus_msgs::Control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 mouse\n"
"uint8 MOUSE_LEFT = 0\n"
"uint8 MOUSE_RIGHT = 1\n"
"\n"
"float32 x\n"
"float32 y\n"
;
  }

  static const char* value(const ::prometheus_msgs::Control_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::prometheus_msgs::Control_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mouse);
      stream.next(m.x);
      stream.next(m.y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Control_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::prometheus_msgs::Control_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::prometheus_msgs::Control_<ContainerAllocator>& v)
  {
    s << indent << "mouse: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mouse);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PROMETHEUS_MSGS_MESSAGE_CONTROL_H
