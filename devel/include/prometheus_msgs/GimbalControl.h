// Generated by gencpp from file prometheus_msgs/GimbalControl.msg
// DO NOT EDIT!


#ifndef PROMETHEUS_MSGS_MESSAGE_GIMBALCONTROL_H
#define PROMETHEUS_MSGS_MESSAGE_GIMBALCONTROL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace prometheus_msgs
{
template <class ContainerAllocator>
struct GimbalControl_
{
  typedef GimbalControl_<ContainerAllocator> Type;

  GimbalControl_()
    : header()
    , Id(0)
    , rpyMode(0)
    , roll(0)
    , yaw(0)
    , pitch(0)
    , rValue(0.0)
    , yValue(0.0)
    , pValue(0.0)
    , focusMode(0)
    , zoomMode(0)  {
    }
  GimbalControl_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , Id(0)
    , rpyMode(0)
    , roll(0)
    , yaw(0)
    , pitch(0)
    , rValue(0.0)
    , yValue(0.0)
    , pValue(0.0)
    , focusMode(0)
    , zoomMode(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _Id_type;
  _Id_type Id;

   typedef uint8_t _rpyMode_type;
  _rpyMode_type rpyMode;

   typedef uint8_t _roll_type;
  _roll_type roll;

   typedef uint8_t _yaw_type;
  _yaw_type yaw;

   typedef uint8_t _pitch_type;
  _pitch_type pitch;

   typedef float _rValue_type;
  _rValue_type rValue;

   typedef float _yValue_type;
  _yValue_type yValue;

   typedef float _pValue_type;
  _pValue_type pValue;

   typedef uint8_t _focusMode_type;
  _focusMode_type focusMode;

   typedef uint8_t _zoomMode_type;
  _zoomMode_type zoomMode;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(manual)
  #undef manual
#endif
#if defined(_WIN32) && defined(home)
  #undef home
#endif
#if defined(_WIN32) && defined(hold)
  #undef hold
#endif
#if defined(_WIN32) && defined(fellow)
  #undef fellow
#endif
#if defined(_WIN32) && defined(noCtl)
  #undef noCtl
#endif
#if defined(_WIN32) && defined(velocityCtl)
  #undef velocityCtl
#endif
#if defined(_WIN32) && defined(angleCtl)
  #undef angleCtl
#endif
#if defined(_WIN32) && defined(focusStop)
  #undef focusStop
#endif
#if defined(_WIN32) && defined(focusOut)
  #undef focusOut
#endif
#if defined(_WIN32) && defined(focusIn)
  #undef focusIn
#endif
#if defined(_WIN32) && defined(zoomStop)
  #undef zoomStop
#endif
#if defined(_WIN32) && defined(zoomOut)
  #undef zoomOut
#endif
#if defined(_WIN32) && defined(zoomIn)
  #undef zoomIn
#endif

  enum {
    manual = 1u,
    home = 2u,
    hold = 3u,
    fellow = 4u,
    noCtl = 0u,
    velocityCtl = 1u,
    angleCtl = 2u,
    focusStop = 1u,
    focusOut = 2u,
    focusIn = 3u,
    zoomStop = 1u,
    zoomOut = 2u,
    zoomIn = 3u,
  };


  typedef boost::shared_ptr< ::prometheus_msgs::GimbalControl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::prometheus_msgs::GimbalControl_<ContainerAllocator> const> ConstPtr;

}; // struct GimbalControl_

typedef ::prometheus_msgs::GimbalControl_<std::allocator<void> > GimbalControl;

typedef boost::shared_ptr< ::prometheus_msgs::GimbalControl > GimbalControlPtr;
typedef boost::shared_ptr< ::prometheus_msgs::GimbalControl const> GimbalControlConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::prometheus_msgs::GimbalControl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::prometheus_msgs::GimbalControl_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::prometheus_msgs::GimbalControl_<ContainerAllocator1> & lhs, const ::prometheus_msgs::GimbalControl_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.Id == rhs.Id &&
    lhs.rpyMode == rhs.rpyMode &&
    lhs.roll == rhs.roll &&
    lhs.yaw == rhs.yaw &&
    lhs.pitch == rhs.pitch &&
    lhs.rValue == rhs.rValue &&
    lhs.yValue == rhs.yValue &&
    lhs.pValue == rhs.pValue &&
    lhs.focusMode == rhs.focusMode &&
    lhs.zoomMode == rhs.zoomMode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::prometheus_msgs::GimbalControl_<ContainerAllocator1> & lhs, const ::prometheus_msgs::GimbalControl_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace prometheus_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::prometheus_msgs::GimbalControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::prometheus_msgs::GimbalControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::prometheus_msgs::GimbalControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::prometheus_msgs::GimbalControl_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::prometheus_msgs::GimbalControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::prometheus_msgs::GimbalControl_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::prometheus_msgs::GimbalControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4412721d5cb10a90210842710eca3f97";
  }

  static const char* value(const ::prometheus_msgs::GimbalControl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4412721d5cb10a90ULL;
  static const uint64_t static_value2 = 0x210842710eca3f97ULL;
};

template<class ContainerAllocator>
struct DataType< ::prometheus_msgs::GimbalControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "prometheus_msgs/GimbalControl";
  }

  static const char* value(const ::prometheus_msgs::GimbalControl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::prometheus_msgs::GimbalControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"uint8 Id\n"
"#control mode 0:nothong 1:angle 2:speed 3:home postion \n"
"uint8 rpyMode\n"
"uint8 manual = 1\n"
"uint8 home = 2\n"
"uint8 hold = 3 # 不控制\n"
"uint8 fellow = 4 #fellow吊舱跟随无人机移动\n"
"\n"
"uint8 roll\n"
"uint8 yaw \n"
"uint8 pitch\n"
"\n"
"uint8 noCtl = 0\n"
"uint8 velocityCtl = 1\n"
"uint8 angleCtl = 2\n"
"\n"
"float32 rValue # deg 单位\n"
"float32 yValue # deg\n"
"float32 pValue # deg \n"
"\n"
"\n"
"# focus\n"
"uint8 focusMode # 默认值\n"
"uint8 focusStop = 1\n"
"uint8 focusOut = 2\n"
"uint8 focusIn = 3\n"
"\n"
"# zoom\n"
"uint8 zoomMode # 默认值\n"
"uint8 zoomStop = 1\n"
"uint8 zoomOut = 2\n"
"uint8 zoomIn = 3\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::prometheus_msgs::GimbalControl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::prometheus_msgs::GimbalControl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.Id);
      stream.next(m.rpyMode);
      stream.next(m.roll);
      stream.next(m.yaw);
      stream.next(m.pitch);
      stream.next(m.rValue);
      stream.next(m.yValue);
      stream.next(m.pValue);
      stream.next(m.focusMode);
      stream.next(m.zoomMode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GimbalControl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::prometheus_msgs::GimbalControl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::prometheus_msgs::GimbalControl_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "Id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Id);
    s << indent << "rpyMode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rpyMode);
    s << indent << "roll: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.roll);
    s << indent << "yaw: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.yaw);
    s << indent << "pitch: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pitch);
    s << indent << "rValue: ";
    Printer<float>::stream(s, indent + "  ", v.rValue);
    s << indent << "yValue: ";
    Printer<float>::stream(s, indent + "  ", v.yValue);
    s << indent << "pValue: ";
    Printer<float>::stream(s, indent + "  ", v.pValue);
    s << indent << "focusMode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.focusMode);
    s << indent << "zoomMode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.zoomMode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PROMETHEUS_MSGS_MESSAGE_GIMBALCONTROL_H
